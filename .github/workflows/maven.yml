name: Java CI with Maven, SonarCloud & Docker Push

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: my-web-app
  IMAGE_TAG: latest
  QUAY_REGISTRY: quay.io
  QUAY_REPO: adminubio
  DOCKER_REGISTRY: docker.io
  DOCKER_REPO: rukevweubio

jobs:

  maven_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./MavenApp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Maven project
        run: mvn clean package

      - name: Run Maven tests
        run: mvn test

  sonarcloud:
    runs-on: ubuntu-latest
    needs: maven_build
    defaults:
      run:
        working-directory: ./MavenApp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarCloud
        working-directory: ./MavenApp
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=Indeedelight12345_Maven-java-deployment-Azure-aks \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      
      - name: Upload Maven artifact
        uses: actions/upload-artifact@v4
        with:
          name: maven-jar
          path: target/*.jar

  docker-build-and-scan:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./MavenApp

      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.IMAGE_NAME }}:${{ env.IMAGE_TAG}}
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-build-and-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: ${{ env.QUAY_REGISTRY }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: Push to Quay.io
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.QUAY_REGISTRY }}/${{ env.QUAY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.QUAY_REGISTRY }}/${{ env.QUAY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push to Docker Hub
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Save Docker image as artifact
        run: docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o ${{ env.IMAGE_NAME }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.IMAGE_NAME }}.tar
